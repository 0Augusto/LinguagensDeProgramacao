# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...
     
- nome: Primeira interação usa: actions/first-interaction@v1.3.0 com: # Token para o repositório. Pode ser passado usando {{ secrets.GITHUB_TOKEN }} repo-token: # Comente para postar na primeira edição de um indivíduo mensagem de emissão: # opcional # Comentário para postar na primeira solicitação de pull de um indivíduo mensagem pr: # opcional 

- nome: Cache usos: actions/cache@v4.0.2 com: # Uma lista de arquivos, diretórios e padrões de curinga para armazenar em cache e restaurar caminho: # Uma chave explícita para restaurar e salvar o cache chave: # Uma lista ordenada de chaves a serem usadas para restaurar o cache obsoleto se nenhum acerto de cache ocorreu para a chave. Observe que `cache-hit` retorna falso neste caso. teclas de restauração: # opcional # O tamanho do pedaço usado para dividir arquivos grandes durante o upload, em bytes upload-chunk-size: # opcional # Um booleano opcional quando ativado, permite que os Windows Runners salvem ou restaurem caches que podem ser restaurados ou salvos, respectivamente, em outras plataformas enableCrossOsArchive: # opcional, o padrão é falso # Falha no fluxo de trabalho se a entrada de cache não for encontrada fail-on-cache-miss: # opcional, o padrão é falso # Verifique se existe uma entrada de cache para a(s) entrada(s) fornecida(s) (chave, chaves de restauração) sem baixar o cache somente pesquisa: # opcional, o padrão é falso # Execute a etapa de postagem para salvar o cache, mesmo que outra etapa antes falhe salvar-sempre: # opcional, o padrão é falso 

- nome: Escape - GraphQL Security # Você pode fixar no commit exato ou na versão. # usos: Escape-Technologies/action@cd29483761720734146426bd66ab13ae0134e6b1 usos: Escape-Technologies/action@v0.1.1 com: # O ID da sua inscrição application_id: # Sua chave de escape api api_key: # Tempo máximo de bloqueio para uma execução de CI/CD tempo limite: # opcional 

- nome: Análise de Segurança Xanitizer # Você pode fixar no commit exato ou na versão. # usos: RIGS-IT/xanitizer-action@87d13138fb113b727cbe040c744a15a2b4fe5316 usos: RIGS-IT/xanitizer-action@v1.0.1 com: # String que é usada como entrada para um arquivo de licença Xanitizer. Nota: Recomenda-se usar um segredo do GitHub para armazenar o conteúdo do arquivo de licença como XANITIZER_LICENSE e acessar o conteúdo na configuração através do parâmetro secreto do GitHub. Consulte https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets para obter detalhes. Nota: Se a licença for uma licença flutuante e um servidor proxy for usado para acessar o servidor de licenças, especifique as configurações do servidor proxy. Se nenhuma configuração for especificada, as configurações do arquivo de propriedades do Xanitizer serão usadas. licença: # opcional # Número de tentativas de obter um token de licença do servidor de licenças. Nota: Se a licença Xanitizer usada for uma licença vinculada à máquina, esse parâmetro será ignorado. Se a licença Xanitizer usada for uma licença flutuante, pode acontecer que todos os tokens estejam em uso ou que a conexão com o servidor de licenças não esteja disponível na inicialização. Nesses casos, nenhum token de licença pode ser solicitado com sucesso do servidor de licenças para iniciar o Xanitizer e o processo sem cabeça terminaria com um erro de licença. Quando este parâmetro é definido para um valor maior que zero, o Xanitizer tenta a cada minuto solicitar um token de licença até que a contagem especificada seja atingida. Definir este parâmetro como zero desativa a repetição. licenseServerRetryCount: # opcional # Caminho relativo em $GITHUB_WORKSPACE onde o projeto foi verificado. Nota: Use o mesmo valor do parâmetro `path` da ação de actions/checkout configurada (consulte https://github.com/actions/checkout#usage parameter `path`). checkoutPath: # opcional # O local de saída do relatório de visão geral. Isso tem que ser uma lista de arquivos ou o parâmetro tem que ser indefinido ou vazio se nenhum relatório de visão geral deve ser escrito. Extensões de arquivo permitidas são: pdf, html, docx. visão geralReportOutputFile: # opcional # Lista separada por vírgula de locais de saída dos relatórios de visão geral. Isso tem que ser uma lista de arquivos ou o parâmetro tem que ser indefinido ou vazio se nenhum relatório de visão geral deve ser escrito. Extensões de arquivo permitidas são: pdf, html, docx. visão geralReportOutputFiles: # opcional # O local de saída do relatório da lista de descobertas. Isso tem que ser uma lista de arquivos ou o parâmetro tem que ser indefinido ou vazio se nenhum relatório de lista de descobertas deve ser escrito. As extensões de arquivo permitidas são: pdf, html, docx, xml, csv, sarif. descobertasListReportOutputFile: # opcional # Lista separada por vírgula de locais de saída dos relatórios da lista de descobertas. Isso tem que ser uma lista de arquivos ou o parâmetro tem que ser indefinido ou vazio se nenhum relatório de lista de descobertas deve ser escrito. As extensões de arquivo permitidas são: pdf, html, docx, xml, csv, sarif. Nota: Se nenhum arquivo de relatório tiver sido secifificado, ou seja, nem um relatório de visão geral nem um relatório de lista de descobertas, tanto um relatório Xanitizer-Findings-List.pdf quanto um relatório Xanitizer-Findings-List.sarif serão gerados no diretório de checkout especificado por $GITHUB_WORKSPACE com o parâmetro relativo opcional `checkoutPath` como padrão. descobertasListReportOutputFiles: # opcional # Sinalizador booleano especificando se apenas descobertas com classificações de problemas são escritas no relatório da lista de descobertas. onlyProblemsInFindingsListReport: # opcional, o padrão é verdadeiro # Sinalizador booleano especificando se todos os detalhes de uma descoberta estão escritos no relatório da lista de descobertas, por exemplo, se a saída contém todas as etapas de um caminho. Nota: Apenas relevante se a extensão do arquivo do parâmetro `findingsListReportOutputFile` for xml, html ou sarif. generateDetailsInFindingsListReport: # opcional, o padrão é verdadeiro # O caminho para o arquivo de configuração do Xanitizer do projeto que deve ser analisado. Este parâmetro ou o parâmetro `rootDirectory` podem ser especificados, mas não ambos. Nota: Se nem o parâmetro `configFile` nem o parâmetro `rootDirectory` tiverem sido especificados, o parâmetro `rootDirectory` será definido para o diretório de checkout especificado por $GITHUB_WORKSPACE com o parâmetro relativo opcional `checkoutPath`. arquivo de configuração: # opcional # O diretório raiz, a ser usado para configurações padrão. Este parâmetro ou o parâmetro `configFile` podem ser especificados, mas não ambos. Nota: Se nem o parâmetro `configFile` nem o parâmetro `rootDirectory` tiverem sido especificados, o parâmetro `rootDirectory` será definido para o diretório de checkout especificado por $GITHUB_WORKSPACE com o parâmetro relativo opcional `checkoutPath`. rootDirectory: # opcional # O nome do projeto que deve ser usado. Apenas relevante se o parâmetro `rootDirectory` for especificado. Se não for fornecido, o nome simples do diretório raiz é usado. nome do projeto: # opcional # O diretório onde colocar o arquivo de configuração gerado. Apenas relevante se o parâmetro `rootDirectory` for especificado. Se não for fornecido, o arquivo de configuração é gerado no `rootDirectory`. configFileDirectory: # opcional # Sinalizador booleano especificando se um arquivo de configuração existente deve ser substituído. Apenas relevante se o parâmetro `rootDirectory` for especificado. overwriteConfigFile: # opcional # Sinalizador booleano especificando se o Xanitizer usa NodeJS para compilar projetos Angular e TypeScript para o próprio código JavaScript ou não. Isso pode ser um risco potencial se alguém tiver manipulado o ng externo ou o script tsc. Se o código já estiver compilado para JavaScript, melhor com um mapa de origem, essa opção pode ser definida como `false` true - permite a compilação de código Angular e TypeScript para JavaScript pelo próprio Xanitizer false - desativa a compilação de código Angular e TypeScript para JavaScript pelo próprio Xanitizer e algumas informações do espaço de trabalho do Xanitizer serão geradas se os arquivos Angular ou Typescript forem encontrados no projeto não definido - se essa opção não estiver definida e os arquivos Angular ou Typescript forem encontrados no projeto, um erro de espaço de trabalho do Xanitizer será gerado compileToJavaScript: # opcional, o padrão é verdadeiro # Sinalizador booleano especificando se a auditoria npm deve ser executada. As APIs de auditoria npm podem ser usadas para relatar sobre bibliotecas node.js vulneráveis conhecidas. Isso requer uma conexão com a Internet e, portanto, deve ser permitido explicitamente. Isso só é relevante para projetos NodeJS. performNodeAudit: # opcional, o padrão é verdadeiro # Sinalizador booleano especificando se a tarefa deve falhar se houver caminhos de pesquisa configurados que não existam. haltOnMissingSearchPaths: # opcional # Uma lista separada por vírgula de grupos de problemas que deixarão a tarefa falhar se, para qualquer um deles, ocorrer um problema de erro do Xanitizer. Os valores possíveis são ALL_ERRORS, WORKSPACE_ERRORS, CALL_GRAPH_ERRORS, ANALYSIS_ERRORS, MIGRATION_ERRORS. Se o valor não estiver definido, isso significa que os problemas não são relevantes para o sucesso da tarefa. haltOnIssues: # opcional # Sinalizador booleano especificando se a tarefa deve falhar se houver descobertas com uma classificação igual ou superior ao valor definido para `findingsRatingThreshold`. haltOnFindings: # opcional # Um valor de classificação. Usado somente se o parâmetro `haltOnFindings` estiver definido. ResultadosLimite de Classificação: # opcional # Sinalizador booleano especificando se o repositório OWASP Dependency Check deve ser atualizado ou não. Nota: A Verificação de Dependência OWASP é baseada em dados de vulnerabilidade armazenados em um repositório local. Recomenda-se atualizar o repositório local de Verificação de Dependência OWASP regularmente via acesso remoto ao Banco de Dados Nacional de Vulnerabilidade (NIST). Se um servidor proxy for usado para acessar a internet, especifique as configurações do servidor proxy, caso contrário, as configurações do arquivo de propriedades do Xanitizer serão usadas. updateOwaspDependencyCheckRepository: # opcional # O nível de registro a ser usado ao executar o Xanitizer. Valores: OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL. logLevel: # opcional # Diretório de dados do projeto do Xanitizer, se não for o padrão em <HOME>/. Xanitizer. projectDataDirectory: # opcional # Sinalizador booleano especificando se a tarefa deve falhar se houver * NOVO * descobertas com uma classificação igual ou superior ao valor definido para `newFindingsRating`. haltOnNewFindings: # opcional # Um valor de classificação. Usado somente se o parâmetro `haltOnNewFindings` estiver definido. newFindingsRatingThreshold: # opcional # Caminho opcional para o repositório local do Maven. Nota: Se nenhuma configuração for especificada, as configurações do arquivo de propriedades do Xanitizer serão usadas. mavenRepository: # opcional # Sinalizador booleano especificando se um instantâneo deve ser criado após a análise e análise da versão atual ou não. createSnapshot: # opcional # Comentário opcional adicionado ao instantâneo recém-criado. Só é relevante se o parâmetro `createSnapshot` for verdadeiro. snapshotComment: # opcional # O diretório de saída da exportação do projeto. Nota: Se o parâmetro for indefinido ou uma string vazia, o projeto não será exportado. exportDirectory: # opcional # Sinalizador booleano especificando se os instantâneos devem ser exportados ou não. O parâmetro só é usado se um diretório de exportação for definido. Se o parâmetro não estiver definido ou vazio, nenhum instantâneo será exportado. exportSnapshots: # opcional # A senha para a exportação do projeto. O parâmetro só é usado se um diretório de exportação for definido. Se o parâmetro não estiver definido ou vazio, o projeto exportado não será criptografado. Nota: Recomenda-se usar um segredo do GitHub para armazenar a exportação como XANITIZER_EXPORT_PASSPHRASE e acessar o conteúdo na configuração através do parâmetro secreto do GitHub. Consulte https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets para obter detalhes. exportPassphrase: # opcional # O caminho para um arquivo de projeto Xanitizer exportado. Se especificado, este projeto é mesclado ao projeto atual. Isso significa que todas as adaptações, descobertas e problemas mais recentes do usuário são migrados para o projeto atual. Projeto mesclado: # opcional # A senha para o projeto mesclado. O parâmetro só é necessário se o parâmetro `mergedProject` estiver definido e o projeto mesclado for criptografado. Nota: Recomenda-se usar um segredo do GitHub para armazenar a senha de exportação como XANITIZER_EXPORT_PASSPHRASE. e acessar o conteúdo na configuração através do parâmetro secreto do GitHub. Consulte https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets para obter detalhes. importPassphrase: # opcional # Servidor proxy opcional para acessar a internet para atualizar o repositório OWASP Dependency Check ou para solicitar um token de licença do servidor de licença pública no caso de uma licença flutuante por meio de um proxy. Nota: Se nenhuma configuração for especificada, as configurações do arquivo de propriedades do Xanitizer serão usadas. proxyServer: # opcional # Porta de servidor proxy opcional. proxyPort: # opcional # Nome de usuário do servidor proxy opcional. proxyUser: # opcional # Senha de usuário do servidor proxy opcional. proxyPassword: # opcional 

- nome: paloaltonetworks/cov # Você pode fixar no commit exato ou na versão. # usos: PaloAltoNetworks/cov@a5c8c2cfd4bbfa59abe1f12eb10a6e455dea7b8a usos: PaloAltoNetworks/cov@3.1.0 com: # O nome da filial principal. main_branch: # padrão é principal # Modo de execução. Ou 'cobertura', 'status de envio' ou 'ambos'. cov_mode: # padrão é cobertura # O nome do arquivo de cobertura a ser usado. cov_file: # padrão é coverage.out # Porcentagem de cobertura necessária padrão. cov_threshold: # opcional, o padrão é 90 # A versão a ser usada para cov. cov_version: # padrão é ${{github.action_ref}} # No modo 'enviar status', passe o ID do fluxo de trabalho que gerou o relatório cov.  workflow_run_id: # opcional # No modo 'send-status', passe o fluxo de trabalho head_sha.  workflow_head_sha: # opcional 

- nome: CodeThreat Scanner # Você pode fixar no commit exato ou na versão. # usos: CodeThreat/codethreat-github-action@89ccd1d539dc44a0c57aab95489f633eb93f7052 usos: CodeThreat/codethreat-github-action@v1.021 com: # FALHOU_ARGS FAILED_ARGS: # opcional, o padrão é 

- nome: Verificador de Links da HashiCorp # Você pode fixar no commit exato ou na versão. # usos: hashicorp/gh-action-check-broken-links@9da9ec2d83f88fe981a856c3f03aca64e68af90c usa: hashicorp/gh-action-check-broken-links@v1 com: # O URL base contra o qual os links serão resolvidos baseUrl: # Uma lista de arquivos que serão verificados para a presença de links arquivos: # opcional # Uma nova lista de URLs que serão ignoradas lista branca: # opcional 

- nome: Ação de implantação de velocidade # Você pode fixar no commit exato ou na versão. # usos: codeclimate/velocity-deploy-action@1b4a22f0db113bf8d85c14fd726cf0ec6d17cd13 usa: codeclimate/velocity-deploy-action@v1.0.0 com: # Seu token de implantação Velocity token: # A tag de versão para a implantação (ou seja, `b123`) versão: # opcional # O ambiente da implantação (ou seja, `produção`) ambiente: # opcional 

- nome: Go-Linty # Você pode fixar no commit exato ou na versão. # usos: ArangoGutierrez/GoLinty-Action@3f9802b64a9abdae2a98e6541ccd4d3271ef44d7 usos: ArangoGutierrez/GoLinty-Action@go-1.13rc1-alpine 

- nome: Go Formatter # Você pode fixar no commit exato ou na versão. # usos: sladyn98/auto-go-format@6557e892479fd174506c48cb34017c51399d492b usos: sladyn98/auto-go-format@v0.0.1 

- nome: Garanta o Go mais recente # Você pode fixar no commit exato ou na versão. # usos: jmhodges/ensure-latest-go@db34caa373314d0cbf407c7882e864418eb22f1a usa: jmhodges/ensure-latest-go@v1.0.2 com: # Uma lista separada por vírgulas de caminhos de arquivos para não atualizar. excluir: # opcional, o padrão é # Uma lista separada por vírgulas de Dockerfiles para atualizar quando uma nova versão Go for lançada. Se definido, ele substituirá o comportamento padrão de atualizar qualquer imagem `golang` Dockerfile no repositório. dockerfiles: # opcional, o padrão é # Uma lista separada por vírgulas de arquivos de configuração do Travis CI para atualizar quando uma nova versão do Go for lançada. Se definido, ele substituirá o comportamento padrão de atualizar (mas não criar) a configuração "go" em um arquivo .travis.yml de nível superior. travisfiles: # opcional, o padrão é 

- nome: go-mnd # Você pode fixar no commit exato ou na versão. # usos: tommy-muehle/go-mnd@16041ac3fe65b98fbbf4c3c9b88c346196211614 usos: tommy-muehle/go-mnd@v2.2.0 com: # Argumentos para ir e ir args: # o padrão é -h 

- nome: Go CI # Você pode fixar no commit exato ou na versão. # usos: ghacts/go@f4993de229e57d20fc296c70a1570a4dfca88db1 usos: ghacts/go@v1.0.0 com: # O caminho para o projeto caminho do projeto: # opcional, o padrão é # A versão do Go para usar go-version: # opcional, o padrão é estável # A versão de golangci-lint para usar golang-ci-lint-version: # opcional, o padrão é o mais recente # Argumentos adicionais para golangci-lint golang-ci-lint-args: # opcional, o padrão é --timeout=10m # Verifique se deve pular o passo do fiapo skip-lint: # opcional # Verifique se você deve pular a etapa de construção skip-build: # opcional # Verifique se deve pular a etapa do teste pular teste: # opcional 

- nome: golang-govulncheck-action # Você pode fixar no commit exato ou na versão. # usos: golang/govulncheck-action@7da72f730e37eeeaad891fcff0a532d27ed737cd4 usos: golang/govulncheck-action@v1.0.1 com: # Versão do Go para usar para govulncheck go-version-input: # opcional # Defina esta opção como verdadeira se você quiser que a ação sempre verifique a versão Go disponível mais recente que satisfaça a especificação da versão check-latest: # opcional # Usado para especificar se o Go cache é necessário. Defina como verdadeiro, se você quiser ativar o cache. cache: # opcional, o padrão é verdadeiro # Vá Pacote para digitalizar com govulncheck go-package: # opcional, o padrão é . /... # Diretório no qual executar o govulncheck work-dir: # opcional, o padrão é . # Confira o repositório repo-checkout: # opcional, o padrão é verdadeiro # Caminho para o arquivo go.mod ou go.work. arquivo de versão go: # opcional 

- nome: Go Release Binary # Você pode fixar no commit exato ou na versão. # usos: ngs/go-release.action@a32a23d081d503245410d9d7bf59b722b50cc766 usa: ngs/go-release.action@v1.0.2 

- nome: Gosec Security Checker # Você pode fixar no commit exato ou na versão. # usos: securego/gosec@55d79496019a560e16e73e1948dee20a1fad631a usos: securego/gosec@v2.18.2 com: # Argumentos para gosec args: # o padrão é -h 
